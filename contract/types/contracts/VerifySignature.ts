/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VerifySignatureInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getEthSignedMessageHash"
      | "getMessageHash"
      | "recoverSigner"
      | "splitSignature"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getEthSignedMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [AddressLike, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverSigner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "splitSignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export interface VerifySignature extends BaseContract {
  connect(runner?: ContractRunner | null): VerifySignature;
  waitForDeployment(): Promise<this>;

  interface: VerifySignatureInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getEthSignedMessageHash: TypedContractMethod<
    [_messageHash: BytesLike],
    [string],
    "view"
  >;

  getMessageHash: TypedContractMethod<
    [
      _to: AddressLike,
      _amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish
    ],
    [string],
    "view"
  >;

  recoverSigner: TypedContractMethod<
    [_ethSignedMessageHash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;

  splitSignature: TypedContractMethod<
    [sig: BytesLike],
    [[string, string, bigint] & { r: string; s: string; v: bigint }],
    "view"
  >;

  verify: TypedContractMethod<
    [
      _signer: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getEthSignedMessageHash"
  ): TypedContractMethod<[_messageHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getMessageHash"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "recoverSigner"
  ): TypedContractMethod<
    [_ethSignedMessageHash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "splitSignature"
  ): TypedContractMethod<
    [sig: BytesLike],
    [[string, string, bigint] & { r: string; s: string; v: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [
      _signer: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
