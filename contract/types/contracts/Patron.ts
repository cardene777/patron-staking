/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PatronInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCreatorInfo"
      | "getCreatorPatronStake"
      | "getEthSignedMessageHash"
      | "getMessageHash"
      | "getPatronInfo"
      | "getPatronStake"
      | "recoverSigner"
      | "splitSignature"
      | "stake"
      | "verify"
      | "withdraw"
      | "withdrawStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Stake" | "Withdraw" | "WithdrawStake"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getCreatorInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorPatronStake",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthSignedMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [AddressLike, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatronInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatronStake",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverSigner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "splitSignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [AddressLike, BigNumberish, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCreatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorPatronStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatronInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatronStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
}

export namespace StakeEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawStakeEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Patron extends BaseContract {
  connect(runner?: ContractRunner | null): Patron;
  waitForDeployment(): Promise<this>;

  interface: PatronInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCreatorInfo: TypedContractMethod<
    [creator: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getCreatorPatronStake: TypedContractMethod<
    [creator: AddressLike, patron: AddressLike],
    [bigint],
    "view"
  >;

  getEthSignedMessageHash: TypedContractMethod<
    [_messageHash: BytesLike],
    [string],
    "view"
  >;

  getMessageHash: TypedContractMethod<
    [
      _to: AddressLike,
      _amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish
    ],
    [string],
    "view"
  >;

  getPatronInfo: TypedContractMethod<
    [patron: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  getPatronStake: TypedContractMethod<
    [patron: AddressLike, creator: AddressLike],
    [bigint],
    "view"
  >;

  recoverSigner: TypedContractMethod<
    [_ethSignedMessageHash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;

  splitSignature: TypedContractMethod<
    [sig: BytesLike],
    [[string, string, bigint] & { r: string; s: string; v: bigint }],
    "view"
  >;

  stake: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  verify: TypedContractMethod<
    [
      _signer: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  withdraw: TypedContractMethod<
    [
      amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;

  withdrawStake: TypedContractMethod<
    [
      to: AddressLike,
      amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCreatorInfo"
  ): TypedContractMethod<
    [creator: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreatorPatronStake"
  ): TypedContractMethod<
    [creator: AddressLike, patron: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEthSignedMessageHash"
  ): TypedContractMethod<[_messageHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getMessageHash"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPatronInfo"
  ): TypedContractMethod<[patron: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getPatronStake"
  ): TypedContractMethod<
    [patron: AddressLike, creator: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "recoverSigner"
  ): TypedContractMethod<
    [_ethSignedMessageHash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "splitSignature"
  ): TypedContractMethod<
    [sig: BytesLike],
    [[string, string, bigint] & { r: string; s: string; v: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [
      _signer: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish,
      signature: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<
    [
      to: AddressLike,
      amount: BigNumberish,
      _message: string,
      _nonce: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "Stake"
  ): TypedContractEvent<
    StakeEvent.InputTuple,
    StakeEvent.OutputTuple,
    StakeEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawStake"
  ): TypedContractEvent<
    WithdrawStakeEvent.InputTuple,
    WithdrawStakeEvent.OutputTuple,
    WithdrawStakeEvent.OutputObject
  >;

  filters: {
    "Stake(address,address,uint256)": TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;
    Stake: TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawStake(address,address,uint256)": TypedContractEvent<
      WithdrawStakeEvent.InputTuple,
      WithdrawStakeEvent.OutputTuple,
      WithdrawStakeEvent.OutputObject
    >;
    WithdrawStake: TypedContractEvent<
      WithdrawStakeEvent.InputTuple,
      WithdrawStakeEvent.OutputTuple,
      WithdrawStakeEvent.OutputObject
    >;
  };
}
